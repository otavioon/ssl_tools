ssl_tools.models.ssl.classifier
===============================

.. py:module:: ssl_tools.models.ssl.classifier


Classes
-------

.. autoapisummary::

   ssl_tools.models.ssl.classifier.SSLDiscriminator


Module Contents
---------------

.. py:class:: SSLDiscriminator(backbone, head, loss_fn, learning_rate = 0.001, update_backbone = True, metrics = None, optimizer_cls = None)

   Bases: :py:obj:`lightning.LightningModule`


   
   A generic SSL Discriminator model. It takes a backbone and a head
   and trains them jointly (or not, depending on the ``update_backbone``
   parameter).

   In summary, the training loop is as follows:
   1. Forward pass through the backbone
   2. Forward pass through the head (with the backbone's output)
   3. Compute the loss
   4. Backpropagate the loss through the head and the backbone (the latter
   is backpropagated only if ``update_backbone`` is True)

   Parameters
   ----------
   backbone : _type_
       The backbone of the model, that will encode the input data
   head : _type_
       The head of the model, that will make the final predictions. It
       taks the output of the backbone as input.
   loss_fn : _type_
       The loss function to use. By default, it is a cross entropy loss.
   learning_rate : float, optional
       The learning rate to use for the optimizer.
   update_backbone : bool, optional
       If True, the backbone will be updated during training. Otherwise,
       only the head will be updated.
   metrics : Dict[str, Metric], optional
       The metrics to use during training. The keys are the names of the
       metrics, and the values are the metrics themselves.


   .. py:method:: _compute_metrics(y_hat, y, stage)

      Compute the metrics.

      Parameters
      ----------
      y_hat : torch.Tensor
          The predictions of the model
      y : _type_
          The ground truth labels
      stage : str
          The stage of the training loop (train, val or test)

      Returns
      -------
      Dict[str, float]
          A dictionary containing the metrics. The keys are the names of the
          metrics, and the values are the values of the metrics.



   .. py:method:: _freeze(model)

      Freezes the model, i.e. sets the requires_grad parameter of all the
      parameters to False.

      Parameters
      ----------
      model : _type_
          The model to freeze



   .. py:method:: _loss_func(y_hat, y)

      Calculates the loss function.

      Parameters
      ----------
      y_hat : torch.Tensor
          The predictions of the model
      y : torch.Tensor
          The ground truth labels



   .. py:method:: configure_optimizers()

      Configures the optimizer. If ``update_backbone`` is True, it will
      update the parameters of the backbone and the head. Otherwise, it will
      only update the parameters of the head.



   .. py:method:: forward(x)

      Performs a forward pass through the model. It first passes the input
      through the backbone, and then passes the output of the backbone through
      the head.

      Parameters
      ----------
      x : torch.Tensor
          The input data. If it is a tuple or a list, it will be unpacked
          before being passed to the backbone.

      Returns
      -------
      torch.Tensor
          The predictions of the model.



   .. py:method:: predict_step(batch, batch_idx)

      Performs a prediction step. It only performs a forward pass through
      the model.

      Parameters
      ----------
      batch : torch.Tensor
          The batch of data
      batch_idx : int
          The index of the batch

      Returns
      -------
      torch.Tensor
          The predictions of the model



   .. py:method:: test_step(batch, batch_idx)

      Performs a test step. It first performs a forward pass through
      the model, then computes the loss. Finally, it logs the loss and the
      metrics (if any) (test_loss, test_metric_1, test_metric_2, ...)

      Parameters
      ----------
      batch : torch.Tensor
          The batch of data
      batch_idx : int
          The index of the batch

      Returns
      -------
      torch.Tensor
          The loss of the model



   .. py:method:: training_step(batch, batch_idx)

      Performs a training step. It first performs a forward pass through
      the model, then computes the loss. Finally, it logs the loss
      (train_loss)

      Parameters
      ----------
      batch : torch.Tensor
          The batch of data
      batch_idx : int
          The index of the batch

      Returns
      -------
      torch.Tensor
          The loss of the model



   .. py:method:: validation_step(batch, batch_idx)

      Performs a validation step. It first performs a forward pass through
      the model, then computes the loss. Finally, it logs the loss and the
      metrics (if any) (val_loss, val_metric_1, val_metric_2, ...)

      Parameters
      ----------
      batch : torch.Tensor
          The batch of data
      batch_idx : int
          The index of the batch

      Returns
      -------
      torch.Tensor
          The loss of the model



