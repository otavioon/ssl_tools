ssl_tools.models.nets.resnet_1d
===============================

.. py:module:: ssl_tools.models.nets.resnet_1d


Classes
-------

.. autoapisummary::

   ssl_tools.models.nets.resnet_1d.ConvolutionalBlock
   ssl_tools.models.nets.resnet_1d.ResNet1DBase
   ssl_tools.models.nets.resnet_1d.ResNet1D_8
   ssl_tools.models.nets.resnet_1d.ResNetBlock
   ssl_tools.models.nets.resnet_1d.ResNetSE1D_5
   ssl_tools.models.nets.resnet_1d.ResNetSE1D_8
   ssl_tools.models.nets.resnet_1d.ResNetSEBlock
   ssl_tools.models.nets.resnet_1d.SqueezeAndExcitation1D
   ssl_tools.models.nets.resnet_1d._ResNet1D


Module Contents
---------------

.. py:class:: ConvolutionalBlock(in_channels, activation_cls = None)

   Bases: :py:obj:`torch.nn.Module`


   .. py:method:: forward(x)


.. py:class:: ResNet1DBase(resnet_block_cls = ResNetBlock, activation_cls = torch.nn.ReLU, input_shape = (6, 60), num_classes = 6, num_residual_blocks = 5, reduction_ratio=2, learning_rate = 0.001)

   Bases: :py:obj:`ssl_tools.models.nets.simple.SimpleClassificationNet`


   .. py:method:: _calculate_fc_input_features(backbone, input_shape)

      Run a single forward pass with a random input to get the number of
      features after the convolutional layers.

      Parameters
      ----------
      backbone : torch.nn.Module
          The backbone of the network
      input_shape : Tuple[int, int, int]
          The input shape of the network.

      Returns
      -------
      int
          The number of features after the convolutional layers.



.. py:class:: ResNet1D_8(*args, **kwargs)

   Bases: :py:obj:`ResNet1DBase`


.. py:class:: ResNetBlock(in_channels = 64, activation_cls = torch.nn.ReLU)

   Bases: :py:obj:`torch.nn.Module`


   .. py:method:: forward(x)


.. py:class:: ResNetSE1D_5(*args, **kwargs)

   Bases: :py:obj:`ResNet1DBase`


.. py:class:: ResNetSE1D_8(*args, **kwargs)

   Bases: :py:obj:`ResNet1DBase`


.. py:class:: ResNetSEBlock(*args, **kwargs)

   Bases: :py:obj:`ResNetBlock`


.. py:class:: SqueezeAndExcitation1D(in_channels, reduction_ratio = 2)

   Bases: :py:obj:`torch.nn.Module`


   .. py:method:: forward(input_tensor)


.. py:class:: _ResNet1D(input_shape, residual_block_cls=ResNetBlock, activation_cls = torch.nn.ReLU, num_residual_blocks = 5, reduction_ratio=2)

   Bases: :py:obj:`torch.nn.Module`


   .. py:method:: forward(x)


