ssl_tools.models.nets.convnet
=============================

.. py:module:: ssl_tools.models.nets.convnet


Classes
-------

.. autoapisummary::

   ssl_tools.models.nets.convnet.Simple1DConvNetwork
   ssl_tools.models.nets.convnet.Simple2DConvNetwork


Module Contents
---------------

.. py:class:: Simple1DConvNetwork(input_shape = (6, 60), num_classes = 6, learning_rate = 0.001)

   Bases: :py:obj:`ssl_tools.models.nets.simple.SimpleClassificationNet`


   
   Create a simple 1D Convolutional Network with 3 layers and 2 fully
   connected layers.

   Parameters
   ----------
   input_shape : Tuple[int, int], optional
       A 2-tuple containing the number of input channels and the number of
       features, by default (6, 60).
   num_classes : int, optional
       Number of output classes, by default 6
   learning_rate : float, optional
       Learning rate for Adam optimizer, by default 1e-3


   .. py:method:: _calculate_fc_input_features(backbone, input_shape)

      Run a single forward pass with a random input to get the number of
      features after the convolutional layers.

      Parameters
      ----------
      backbone : torch.nn.Module
          The backbone of the network
      input_shape : Tuple[int, int]
          The input shape of the network.

      Returns
      -------
      int
          The number of features after the convolutional layers.



   .. py:method:: _create_backbone(input_channels)


   .. py:method:: _create_fc(input_features, num_classes)


.. py:class:: Simple2DConvNetwork(input_shape = (6, 1, 60), num_classes = 6, learning_rate = 0.001)

   Bases: :py:obj:`ssl_tools.models.nets.simple.SimpleClassificationNet`


   
   Create a simple 2D Convolutional Network with 3 layers and 2 fully
   connected layers.

   Parameters
   ----------
   input_shape : Tuple[int, int, int], optional
       A 3-tuple containing the number of input channels, and the number of
       the 2D input shape, by default (6, 1, 60).
   num_classes : int, optional
       Number of output classes, by default 6
   learning_rate : float, optional
       Learning rate for Adam optimizer, by default 1e-3


   .. py:method:: _calculate_fc_input_features(backbone, input_shape)

      Run a single forward pass with a random input to get the number of
      features after the convolutional layers.

      Parameters
      ----------
      backbone : torch.nn.Module
          The backbone of the network
      input_shape : Tuple[int, int, int]
          The input shape of the network.

      Returns
      -------
      int
          The number of features after the convolutional layers.



   .. py:method:: _create_backbone(input_channels)


   .. py:method:: _create_fc(input_features, num_classes)


