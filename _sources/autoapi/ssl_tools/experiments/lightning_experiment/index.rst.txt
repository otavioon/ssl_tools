ssl_tools.experiments.lightning_experiment
==========================================

.. py:module:: ssl_tools.experiments.lightning_experiment


Classes
-------

.. autoapisummary::

   ssl_tools.experiments.lightning_experiment.LightningExperiment
   ssl_tools.experiments.lightning_experiment.LightningSSLTrain
   ssl_tools.experiments.lightning_experiment.LightningTest
   ssl_tools.experiments.lightning_experiment.LightningTrain


Module Contents
---------------

.. py:class:: LightningExperiment(name = None, stage_name = None, batch_size = 1, load = None, accelerator = 'cpu', devices = 1, strategy = 'auto', num_nodes = 1, num_workers = None, log_every_n_steps = 50, *args, **kwargs)

   Bases: :py:obj:`ssl_tools.experiments.experiment.Experiment`


   Helper class that provides a standard way to create an ABC using
   inheritance.


   .. py:attribute:: _MODEL_NAME
      :type:  str
      :value: 'model'



   .. py:attribute:: _STAGE_NAME
      :type:  str
      :value: 'stage'



   .. py:method:: __str__()

      Return str(self).



   .. py:property:: callbacks
      :type: List[lightning.Callback]



   .. py:property:: checkpoint_dir
      :type: pathlib.Path



   .. py:property:: data_module
      :type: lightning.LightningDataModule



   .. py:property:: experiment_dir
      :type: pathlib.Path



   .. py:property:: finished
      :type: bool



   .. py:method:: get_callbacks()

      Get the callbacks to use for the experiment.

      Returns
      -------
      List[L.Callback]
          A list of callbacks to use for the experiment



   .. py:method:: get_data_module()
      :abstractmethod:


      Get the datamodule to use for the experiment.

      Returns
      -------
      L.LightningDataModule
          The datamodule to use for the experiment



   .. py:method:: get_logger()

      Get the logger to use for the experiment.

      Returns
      -------
      Logger
          The logger to use for the experiment



   .. py:method:: get_model()
      :abstractmethod:


      Get the model to use for the experiment.

      Returns
      -------
      L.LightningModule
          The model to use for the experiment



   .. py:method:: get_trainer(logger, callbacks)
      :abstractmethod:


      Get trainer to use for the experiment.

      Parameters
      ----------
      logger : _type_
          The logger to use for the experiment
      callbacks : List[L.Callback]
          A list of callbacks to use for the experiment

      Returns
      -------
      L.Trainer
          The trainer to use for the experiment



   .. py:property:: hyperparameters
      :type: dict



   .. py:method:: load_checkpoint(model, path)

      Load the model to use for the experiment.

      Returns
      -------
      L.LightningModule
          The model to use for the experiment



   .. py:method:: log_hyperparams(logger)

      Log the hyperparameters for reproducibility purposes.

      Parameters
      ----------
      model : L.LightningModule
          The model to log the hyperparameters from
      logger : Logger
          The logger to use for logging the hyperparameters



   .. py:property:: logger
      :type: lightning.pytorch.loggers.Logger



   .. py:property:: model
      :type: lightning.LightningModule



   .. py:method:: run()

      Runs the experiment. This method:
      1. Instantiates the model and data module (depending on the
      ``training_mode``) and load the checkpoint if provided
      2. Instantiates the trainer specific resources (logger, callbacks, etc.)
      3. Logs the hyperparameters (for reproducibility purposes)
      4. Instantiates the trainer
      5. Trains/Tests the model



   .. py:method:: run_model(model, data_module, trainer)
      :abstractmethod:



   .. py:method:: setup()


   .. py:property:: trainer
      :type: lightning.Trainer



.. py:class:: LightningSSLTrain(training_mode = 'pretrain', load_backbone = None, *args, **kwargs)

   Bases: :py:obj:`LightningTrain`


   Helper class that provides a standard way to create an ABC using
   inheritance.

   Wraps the LightningTrain class to provide a more specific interface
   for SSL experiments (training).

   Parameters
   ----------
   training_mode : str, optional
       The training mode. It could be either "pretrain" or "finetune"
   load_backbone : str, optional
       Path to the backbone to load. This is only used when training_mode
       is "finetune". In fine-tuning, the backbone is loaded and the
       using ``load_backbone``. The ``load`` parameter is used to load the
       full model (backbone + head).


   .. py:method:: get_data_module()

      Get the datamodule to use for the experiment.

      Returns
      -------
      L.LightningDataModule
          The datamodule to use for the experiment



   .. py:method:: get_finetune_data_module()
      :abstractmethod:


      The data module to use for fine-tuning.

      Returns
      -------
      L.LightningDataModule
          The data module to use for fine-tuning

      Raises
      ------
      NotImplementedError
          _description_



   .. py:method:: get_finetune_model(load_backbone = None)
      :abstractmethod:


      Get the model to use for fine-tuning.

      Parameters
      ----------
      load_backbone : str, optional
          The path to the backbone to load. The backbone must be loaded
          inside this method, if it is not None.

      Returns
      -------
      L.LightningModule
          The model to use for fine-tuning



   .. py:method:: get_model()

      Get the model to use for the experiment.

      Returns
      -------
      L.LightningModule
          The model to use for the experiment



   .. py:method:: get_pretrain_data_module()
      :abstractmethod:


      The data module to use for pre-training.

      Returns
      -------
      L.LightningDataModule
          The data module to use for pre-training



   .. py:method:: get_pretrain_model()
      :abstractmethod:


      Get the model to use for the pretraining phase.

      Returns
      -------
      L.LightningModule
          The model to use for the pretraining phase



.. py:class:: LightningTest(limit_test_batches = 1.0, *args, **kwargs)

   Bases: :py:obj:`LightningExperiment`


   Helper class that provides a standard way to create an ABC using
   inheritance.


   .. py:attribute:: _STAGE_NAME
      :value: 'test'



   .. py:method:: get_callbacks()

      Get the callbacks to use for the experiment.

      Returns
      -------
      List[L.Callback]
          The list of callbacks to use for the experiment.



   .. py:method:: get_trainer(logger, callbacks)

      Get trainer to use for the experiment.

      Parameters
      ----------
      logger : _type_
          The logger to use for the experiment
      callbacks : List[L.Callback]
          A list of callbacks to use for the experiment

      Returns
      -------
      L.Trainer
          The trainer to use for the experiment



   .. py:method:: run_model(model, data_module, trainer)


.. py:class:: LightningTrain(stage_name = 'train', epochs = 1, learning_rate = 0.001, checkpoint_metric = None, checkpoint_metric_mode = 'min', limit_train_batches = 1.0, limit_val_batches = 1.0, patience = None, *args, **kwargs)

   Bases: :py:obj:`LightningExperiment`


   Helper class that provides a standard way to create an ABC using
   inheritance.


   .. py:attribute:: _STAGE_NAME
      :value: 'train'



   .. py:method:: get_callbacks()

      Get the callbacks to use for the experiment.

      Returns
      -------
      List[L.Callback]
          A list of callbacks to use for the experiment



   .. py:method:: get_trainer(logger, callbacks)

      Get trainer to use for the experiment.

      Parameters
      ----------
      logger : _type_
          The logger to use for the experiment
      callbacks : List[L.Callback]
          A list of callbacks to use for the experiment

      Returns
      -------
      L.Trainer
          The trainer to use for the experiment



   .. py:method:: run_model(model, data_module, trainer)


